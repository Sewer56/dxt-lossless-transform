---
description: 
globs: projects/api/dxt-lossless-transform-bc1-api/src/c_api/**.rs
alwaysApply: false
---
# C API Design Patterns for DXT Lossless Transform

## ABI Stability

The C API follows a two-tier design for maximum flexibility:

- **ABI-Stable Functions**: Use opaque contexts and builder patterns that maintain compatibility across versions
- **ABI-Unstable Functions**: Prefixed with `dltbc1_unstable_*`, accept structs directly for maximum performance but may break between versions

## Function Naming Pattern

C API functions follow a consistent naming pattern with PascalCase for types and methods:

- **Creation/Destruction Functions**: `dltbc1_{action}_{TypeName}`
  - `dltbc1_new_EstimateOptionsBuilder`
  - `dltbc1_free_EstimateOptionsBuilder`
  - `dltbc1_new_TransformContext`
  - `dltbc1_free_TransformContext`
  - `dltbc1_clone_TransformContext`

- **Context-Based Methods**: `dltbc1_{TypeName}_{Method}`
  - `dltbc1_EstimateOptionsBuilder_SetUseAllDecorrelationModes`
  - `dltbc1_EstimateOptionsBuilder_BuildAndDetermineOptimal`
  - `dltbc1_TransformContext_SetDecorrelationMode`
  - `dltbc1_TransformContext_Transform` (context as LAST parameter)
  - `dltbc1_TransformContext_Untransform` (context as LAST parameter)

- **Unstable Functions**: `dltbc1_unstable_{action}`
  - `dltbc1_unstable_transform`
  - `dltbc1_unstable_untransform`
  - `dltbc1_unstable_determine_optimal`

## Parameter Order

- For context-based functions, the context should ALWAYS be the last parameter
- Example: `dltbc1_TransformContext_Transform(input, input_len, output, output_len, context)`

## Type Safety & FFI

- Do NOT add `#[repr(C)]` to internal API structs (e.g., `Bc1TransformDetails`)
- Create FFI-safe mirror structs with `#[repr(C)]` in C API modules (e.g., `Dltbc1TransformDetails`)
- Implement `From` conversions between internal and FFI types
- Use stable re-exports from `dxt-lossless-transform-api-common` instead of internal APIs
- Example: Use `dxt_lossless_transform_api_common::reexports::color_565::YCoCgVariant` not `dxt_lossless_transform_common::color_565::YCoCgVariant`

## Module Organization

- Place unstable functions in `unstable.rs` within their respective modules
- Structure: `c_api/transform/unstable.rs`, `c_api/determine_optimal_transform/unstable.rs`
- Stable functions in the main module should call unstable functions internally

## Settings Patterns

- For unstable functions with multiple parameters, use settings structs to allow future expansion
- Example: `Dltbc1DetermineOptimalSettings` instead of multiple boolean parameters
- Settings structs should be `#[repr(C)]` and `#[derive(Default)]` for C compatibility

## Documentation Practices

- Don't describe implementation details unnecessarily (avoid "internally calls X function")
- For README files injected into lib.rs, use crate-relative syntax: `[`function_name`]: crate::module::function_name`
- Include clear warnings about ABI instability for unstable functions
