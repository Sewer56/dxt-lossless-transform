name: Test, Coverage, Release on Tag

on:
  push:
    branches: [ main ]
    paths:
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'projects/**'
      - 'fuzz/**'
      - 'assets/tests/**'
      - '.github/workflows/rust.yml'
    tags:
      - '*'
  pull_request:
    branches: [ main ]
    paths:
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'projects/**'
      - 'fuzz/**'
      - 'assets/tests/**'
      - '.github/workflows/rust.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  build-with-pgo: true

jobs:
  test:
    strategy:
      matrix:
        include:
          # Linux All features (nightly)
          - { label: "Linux x64 (All Features, Nightly)", os: ubuntu-latest, target: x86_64-unknown-linux-gnu, use-cross: false, additional-test-args: "--all-features", rust-toolchain: 'nightly' }
          - { label: "Linux x86 (All Features, Nightly)", os: ubuntu-latest, target: i686-unknown-linux-gnu, use-cross: false, additional-test-args: "--all-features", rust-toolchain: 'nightly' }
          
          # Linux No features (stable)
          - { label: "Linux x64 (Stable)", os: ubuntu-latest, target: x86_64-unknown-linux-gnu, use-cross: false, rust-toolchain: 'stable' }
          - { label: "Linux x86 (Stable)", os: ubuntu-latest, target: i686-unknown-linux-gnu, use-cross: false, rust-toolchain: 'stable' }
          
          # No CPU detection (on x86)
          - { label: "Linux x64 (No CPU Detection)", os: ubuntu-latest, target: x86_64-unknown-linux-gnu, use-cross: false, features: "no-runtime-cpu-detection", rust-toolchain: 'stable' }
          - { label: "Linux x86 (No CPU Detection)", os: ubuntu-latest, target: i686-unknown-linux-gnu, use-cross: false, features: "no-runtime-cpu-detection", rust-toolchain: 'stable' }
          
          # 32-bit ARM (e.g. Raspberry Pi, Legacy Android)
          - { label: "Linux 32-bit ARMv7", os: ubuntu-latest, target: armv7-unknown-linux-gnueabihf, use-cross: true, rust-toolchain: 'stable' }

          # Big Endian (32-bit)
          - { label: "Linux + Big Endian 32-bit", os: ubuntu-latest, target: powerpc-unknown-linux-gnu, use-cross: true, rust-toolchain: 'stable' }
          
          # Big Endian (64-bit)
          - { label: "Linux + Big Endian 64-bit", os: ubuntu-latest, target: powerpc64-unknown-linux-gnu, use-cross: true, rust-toolchain: 'stable' }

          # Windows
          - { label: "Windows x64", os: windows-latest, target: x86_64-pc-windows-msvc, use-cross: false, rust-toolchain: 'stable' }
          - { label: "Windows x86", os: windows-latest, target: i686-pc-windows-msvc, use-cross: false, rust-toolchain: 'stable' }
          
          # macOS
          - { label: "macOS Intel", os: macos-13, target: x86_64-apple-darwin, use-cross: false, rust-toolchain: 'stable' }
          - { label: "macOS Apple Silicon", os: macos-14, target: aarch64-apple-darwin, use-cross: false, rust-toolchain: 'stable' }

          # Android (Mobile)
          - { label: "Android ARM64", os: ubuntu-latest, target: aarch64-linux-android, use-cross: true, additional-test-args: "--all-features", rust-toolchain: 'nightly' }
          - { label: "Android ARM v7", os: ubuntu-latest, target: armv7-linux-androideabi, use-cross: true, additional-test-args: "--all-features", rust-toolchain: 'nightly' }
          # - { label: "Android x64", os: ubuntu-latest, target: x86_64-linux-android, use-cross: true, additional-test-args: "--all-features", rust-toolchain: 'nightly' }

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Run Tests
        uses: Reloaded-Project/devops-rust-test-and-coverage@v1
        with:
          target: ${{ matrix.target }}
          use-cross: ${{ matrix.use-cross }}
          codecov-token: ${{ secrets.CODECOV_TOKEN }}
          features: ${{ matrix.features }}
          rust-toolchain: ${{ matrix.rust-toolchain }}
          additional-test-args: ${{ matrix.additional-test-args }}

      # Uncomment after first release.
      # - name: Check semver
      #   uses: obi1kenobi/cargo-semver-checks-action@v2

  build-cli:
    strategy:
      matrix:
        include:
          # Linux Targets
          - { label: "Build CLI Linux x64", os: ubuntu-latest, target: x86_64-unknown-linux-gnu, use-cross: false, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }
          - { label: "Build CLI Linux x86", os: ubuntu-latest, target: i686-unknown-linux-gnu, use-cross: false, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }
          
          # Windows Targets
          - { label: "Build CLI Windows x64", os: windows-latest, target: x86_64-pc-windows-msvc, use-cross: false, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }
          - { label: "Build CLI Windows x86", os: windows-latest, target: i686-pc-windows-msvc, use-cross: false, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }
          
          # macOS Targets
          - { label: "Build CLI macOS Intel", os: macos-13, target: x86_64-apple-darwin, use-cross: false, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }
          - { label: "Build CLI macOS Apple Silicon", os: macos-14, target: aarch64-apple-darwin, use-cross: false, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }

          # Android
          - { label: "Build CLI Android ARM64", os: ubuntu-latest, target: aarch64-linux-android, use-cross: true, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }
          - { label: "Build CLI Android ARM v7", os: ubuntu-latest, target: armv7-linux-androideabi, use-cross: true, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }
          - { label: "Build CLI Android x64", os: ubuntu-latest, target: x86_64-linux-android, use-cross: true, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Build CLI
        uses: Reloaded-Project/devops-rust-lightweight-binary@v1
        with:
          crate-name: "dxt-lossless-transform-cli"
          rust-project-path: "projects/dxt-lossless-transform-cli"
          workspace-path: "."
          target: ${{ matrix.target }}
          use-cross: ${{ matrix.use-cross }}
          additional-rustc-args: ${{ matrix.additional-rustc-args }}
          codecov-token: ${{ secrets.CODECOV_TOKEN }}

  build-c-api:
    strategy:
      matrix:
        include:
          # Linux Targets
          - { label: "Build C API Linux x64", os: ubuntu-latest, target: x86_64-unknown-linux-gnu, use-cross: false, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }
          - { label: "Build C API Linux x86", os: ubuntu-latest, target: i686-unknown-linux-gnu, use-cross: false, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }
          
          # Windows Targets
          - { label: "Build C API Windows x64", os: windows-latest, target: x86_64-pc-windows-msvc, use-cross: false, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }
          - { label: "Build C API Windows x86", os: windows-latest, target: i686-pc-windows-msvc, use-cross: false, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }
          
          # macOS Targets
          - { label: "Build C API macOS Intel", os: macos-13, target: x86_64-apple-darwin, use-cross: false, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }
          - { label: "Build C API macOS Apple Silicon", os: macos-14, target: aarch64-apple-darwin, use-cross: false, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }

          # Android
          - { label: "Build C API Android ARM64", os: ubuntu-latest, target: aarch64-linux-android, use-cross: true, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }
          - { label: "Build C API Android ARM v7", os: ubuntu-latest, target: armv7-linux-androideabi, use-cross: true, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }
          - { label: "Build C API Android x64", os: ubuntu-latest, target: x86_64-linux-android, use-cross: true, additional-rustc-args: "--all-features", rust-toolchain: 'nightly' }

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Build C API
        uses: Reloaded-Project/devops-rust-lightweight-binary@v1
        with:
          crate-name: "dxt-lossless-transform-api"
          rust-project-path: "projects/dxt-lossless-transform-api"
          workspace-path: "."
          target: ${{ matrix.target }}
          use-cross: ${{ matrix.use-cross }}
          features: "c-exports"
          additional-rustc-args: ${{ matrix.additional-rustc-args }}
          codecov-token: ${{ secrets.CODECOV_TOKEN }}

  build-c-headers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Generate C++ bindings
        uses: Reloaded-Project/devops-rust-cbindgen@v1
        with:
          rust-project-path: 'projects/dxt-lossless-transform-api/'
          config-file: cbindgen_cpp.toml
          output-header-file: bindings_cpp.hpp
      - name: Generate C bindings
        uses: Reloaded-Project/devops-rust-cbindgen@v1
        with:
          rust-project-path: 'projects/dxt-lossless-transform-api/'
          config-file: cbindgen_c.toml
          output-header-file: bindings_c.h

  publish-crate:
    permissions:
      contents: write

    needs: [test, build-cli, build-c-api]
    # Publish only on tags
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Publish Rust Crate and Artifacts  
        uses: Reloaded-Project/devops-publish-action@v1
        with:
          crates-io-token: ${{ secrets.CRATES_IO_TOKEN }}
          rust-project-paths: |
            .